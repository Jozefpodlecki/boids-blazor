@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using FlockingSimulator.Components
@using FlockingSimulator.Components.Icons

@inject ILogger<Index> Logger;
@inject IJSRuntime JsRuntime;
@inject IRendererFactory RendererFactory;
@inject IBoidsSimulatorFactory BoidsSimulatorFactory;
@implements IAsyncDisposable

<ToastManager IsOpen="@_isBrowserResizeRequired" OnClose="OnToastClose"/>
<BECanvas @key="@_selectedContext" @ref="_canvasReference"></BECanvas>
<BottomPanel
IsDebugEnabled="_isDebugEnabled"
IsRunning="_isRunning"
OnDebug="OnDebug"
OnScreenshot="OnScreenshot"
OnRun="OnRun"
OnSettings="OnSettings"  />

@if (_isConfigurationVisible)
{
    <Configuration
    Options="_options"
    Context="@_selectedContext"
    DrawingContexts="_availableContexts"
    ContextChanged="ContextChanged"
    OptionsChanged="OptionsChanged"
    OnClose="OnModalClose" />
}

@code
{
    private CancellationTokenSource? _cancellationTokenSource;
    private BECanvasComponent? _canvasReference = null;
    private BoidsSimulatorOptions _options = new BoidsSimulatorOptions();
    private IBoidsSimulator _simulator = default!;
    private string _selectedContext = "webgl";
    private IEnumerable<string> _availableContexts = new string[0];
    private bool _isConfigurationVisible = false;
    private bool _isDebugEnabled = false;
    private bool _isRunning = true;
    private double _lastFrameTimestamp;
    private bool _isHidden;
    private bool _isBrowserResizeRequired;    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) {
            return;
        }

        var dotNetReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("registerEvents", dotNetReference);
        await JsRuntime.InvokeVoidAsync("startAnimationFrame", dotNetReference);

        _availableContexts = await JsRuntime.InvokeAsync<IEnumerable<string>>("getAvailableContexts");
        Logger.LogDebug("Available contexts: {0}", _availableContexts);

        _isConfigurationVisible = true;
        StateHasChanged();
    }

    private async Task ContextChanged(string context)
    {
        _selectedContext = context;

        if(_simulator != null)
        {
            _cancellationTokenSource.Cancel();
            await _simulator.CleanupAsync();
            _simulator = null;
        }

        await SetupSimulatorAsync();

        _isBrowserResizeRequired = true;
        StateHasChanged();
    }

    private async Task SetupSimulatorAsync()
    {  
        _cancellationTokenSource = new CancellationTokenSource();
        var renderer = await RendererFactory.CreateAsync(_selectedContext, _canvasReference);
        _simulator = BoidsSimulatorFactory.Create(renderer, _options);
        await _simulator.SetupAsync();
    }

    private async ValueTask SetCanvasResolutionAsync(double width, double height)
    {
        var parameters = new Dictionary<string, object?>
        {
            { nameof(BECanvasComponent.Width), (long)width },
            { nameof(BECanvasComponent.Height), (long)height }
        };

        await _canvasReference.SetParametersAsync(ParameterView.FromDictionary(parameters));
    }

    [JSInvokable]
    public async ValueTask OnResizeAsync(double width, double height)
    {
        Logger.LogDebug("OnResize: {} {}", width, height);
        await SetCanvasResolutionAsync(width, height);

        _options ??= new BoidsSimulatorOptions();

        _options.Width = (int)width;
        _options.Height = (int)height;

        _cancellationTokenSource?.Cancel();

        if(_simulator != null)
        {
            await _simulator.CleanupAsync();
        }

        _simulator = null;
        await SetupSimulatorAsync();

        _isBrowserResizeRequired = false;
        StateHasChanged();
    }

    [JSInvokable]
    public async ValueTask OnVisibilityChange(bool isHidden)
    {
        Logger.LogDebug("OnVisibilityChange: {}", isHidden);
        _isHidden = isHidden;
    }

    private async Task OptionsChanged(BoidsSimulatorOptions options)
    {
        Logger.LogDebug("OptionsChanged: {}", options);

        if(_options.Fps != options.Fps)
        {
            Logger.LogDebug("Fps Changed: {}", options);
        }

        var recreateSimulator = false;

        if(_options.MaxSpeed != options.MaxSpeed
            || _options.Count != options.Count
            || _options.SeparationDistance != options.SeparationDistance
            || _options.PerceptionRadius != options.PerceptionRadius)
        {
            recreateSimulator = true;
        }

        _options.Fps = options.Fps;
        _options.FrameThresholdMilliseconds = options.FrameThresholdMilliseconds;
        _options.SeparationDistance = options.SeparationDistance;
        _options.PerceptionRadius = options.PerceptionRadius;
        _options.Count = options.Count;
        _options.MaxSpeed = options.MaxSpeed;

        if(recreateSimulator)
        {
            _cancellationTokenSource.Cancel();
            await SetupSimulatorAsync();
        }
    }

    [JSInvokable]
    public async ValueTask OnFrameAsync(double timestamp)
    {
        if(!_isRunning || _simulator == null || _isHidden)
        {
            return;
        }

        if (timestamp - _lastFrameTimestamp < _options.FrameThresholdMilliseconds)
        {
            Logger.LogDebug("{} {} {}", timestamp, _lastFrameTimestamp, timestamp - _lastFrameTimestamp);
            return;
        }

        _lastFrameTimestamp = timestamp;

        try
        {
            await _simulator.UpdateAndRenderAsync(_isDebugEnabled, _cancellationTokenSource.Token);
        }
        catch(Exception ex)
        {

        }

    }

    private void OnSettings()
    {
        Logger.LogDebug("Settings Popup");
        _isConfigurationVisible = !_isConfigurationVisible;
    }

    private async Task OnScreenshot()
    {
        await JsRuntime.InvokeVoidAsync("downloadScreenShot", "image");
    }

    private void OnRun()
    {
        _isRunning = !_isRunning;
    }

    private void OnDebug()
    {
        Logger.LogDebug("Debug Toggle: {}", _isDebugEnabled);
        _isDebugEnabled  = !_isDebugEnabled;
    }

    private void OnModalClose() => _isConfigurationVisible = false;

    private void OnToastClose() => _isBrowserResizeRequired = false;

    public async ValueTask DisposeAsync()
    {
        if(_simulator != null)
        {
            await _simulator.CleanupAsync();
        }
    }
}