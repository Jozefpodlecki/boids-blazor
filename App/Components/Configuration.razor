@using FlockingSimulator.Components.Icons

@inject ILogger<Configuration> Logger;

<div class="absolute bottom-[40px] right-0 p-8 bg-[#000000] w-[300px]">
    <div class="flex justify-end">
        <div class="flex-grow-1 text-white text-md">
            Settings
        </div>
        <div class="text-white cursor-pointer" @onclick="OnClose">
            <CloseIcon Width="20" Height="20" />
        </div>
    </div>
     <section class="pt-2">
        <label for="drawing-context" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Drawing Context</label>
        <select
            id="drawing-context"
            value="@Context"
            @onchange="OnContextChange"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            @foreach (var context in DrawingContexts)
            {
                <option selected="@((context == Context) ? "selected" : null)" value="@context">@context</option>
            }
        </select>
    </section>
    <section class="pt-2">
        <div class="relative mb-6">
            <label for="fps" class="text-sm font-medium text-white">Fps Threshold: @Options.Fps</label>
            <input
                id="fps"
                type="range"
                min="30"
                max="120"
                @bind:event="oninput"
                @bind:get="Options.Fps"
                @bind:set="OnFpsChangeAsync"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">30</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-1/3 -translate-x-1/2 rtl:translate-x-1/2 -bottom-6">60</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-2/3 -translate-x-1/2 rtl:translate-x-1/2 -bottom-6">90</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">120</span>
        </div>
    </section>
    <section class="pt-2">
        <div class="relative mb-6">
            <label for="flock-count" class="block mb-2 text-sm font-medium text-white">Flock count: @Options.Count</label>
            <input id="flock-count"
                type="range"
                min="10"
                max="100"
                @bind:event="oninput"
                @bind:get="Options.Count"
                @bind:set="OnFlockCountChangeAsync"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">10</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">100</span>
        </div>
        
    </section>
    <section class="pt-2">
        <div class="relative mb-6">
            <label for="perception-radius" class="block mb-2 text-sm font-medium text-white">Perception radius: @Options.PerceptionRadius</label>
            <input
                id="perception-radius"
                type="range"
                min="10"
                max="100"
                @bind:event="oninput"
                @bind:get="(int)Options.PerceptionRadius"
                @bind:set="OnPerceptionRadiusChangeAsync"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">10</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">100</span>
        </div>
    </section>
    <section class="pt-2">
        <div class="relative mb-6">
            <label for="speed" class="block mb-2 text-sm font-medium text-white">Speed @Options.MaxSpeed</label>
            <input
                id="speed"
                type="range"
                min="2"
                max="50"
                @bind:event="oninput"
                @bind:get="Options.MaxSpeed"
                @bind:set="OnSpeedChangeAsync"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">2</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">50</span>
        </div>  
    </section>
    <section class="pt-2">
        <div class="relative mb-6">
            <label for="separation-distance" class="block mb-2 text-sm font-medium text-white">Separation distance: @Options.SeparationDistance</label>
            <input
                id="separation-distance"
                type="range"
                min="10"
                max="100"
                @bind:event="oninput"
                @bind:get="Options.SeparationDistance"
                @bind:set="OnSeparationDistanceChangeAsync"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">10</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">100</span>
        </div>
    </section>
</div>

@code {
    [Parameter, EditorRequired]
    public string Context { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<string> DrawingContexts { get; set; } = Enumerable.Empty<string>();

    [Parameter]
    public BoidsSimulatorOptions Options { get; set; } = new();

    [Parameter]
    public EventCallback<BoidsSimulatorOptions> OptionsChanged { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<string> ContextChanged { get; set; }

    private BoidsSimulatorOptions CurrentOptions;

    private async Task OnContextChange(ChangeEventArgs eventArgs)
    {
       var value = eventArgs.Value.ToString();
       await ContextChanged.InvokeAsync(value);
    }

    private async Task OnFpsChangeAsync(int value)
    {
        CurrentOptions.Fps = value;
        CurrentOptions.FrameThresholdMilliseconds = 1000.0 / value;
        await OptionsChanged.InvokeAsync(CurrentOptions);
    }

    private async Task OnFlockCountChangeAsync(int value)
    {
        CurrentOptions.Count = value;
        await OptionsChanged.InvokeAsync(CurrentOptions);
    }

    private async Task OnPerceptionRadiusChangeAsync(int value)
    {
        CurrentOptions.PerceptionRadius = value;
        await OptionsChanged.InvokeAsync(CurrentOptions);
    }

    private async Task OnSpeedChangeAsync(float value)
    {
        CurrentOptions.MaxSpeed = value;
        await OptionsChanged.InvokeAsync(CurrentOptions);
    }

    private async Task OnSeparationDistanceChangeAsync(float value)
    {
        CurrentOptions.SeparationDistance = value;
        await OptionsChanged.InvokeAsync(CurrentOptions);
    }

    protected override void OnParametersSet()
    {
        CurrentOptions = Options.Clone();
    }
}