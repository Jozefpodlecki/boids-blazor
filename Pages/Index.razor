@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@inject ILogger<Index> Logger;
@inject IJSRuntime JsRuntime;

<div>
    <BECanvas @ref="_canvasReference"></BECanvas>
</div>
<div class="absolute bottom-0 text-white flex p-2 w-full justify-end">
    <div class="flex flex-grow-1">
            <a class="cursor-pointer" href="https://github.com/Jozefpodlecki/boids-blazor">
                <svg xmlns="http://www.w3.org/2000/svg" width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-brand-github"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5" />
                </svg>
            </a>
            <span class="pl-2">© Jozef Podlecki 2025</span>
        </div>
   
    <div class="flex">
        <div class="cursor-pointer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-bug"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 9v-1a3 3 0 0 1 6 0v1" /><path d="M8 9h8a6 6 0 0 1 1 3v3a5 5 0 0 1 -10 0v-3a6 6 0 0 1 1 -3" /><path d="M3 13l4 0" /><path d="M17 13l4 0" /><path d="M12 20l0 -6" /><path d="M4 19l3.35 -2" /><path d="M20 19l-3.35 -2" /><path d="M4 7l3.75 2.4" /><path d="M20 7l-3.75 2.4" />
            </svg>
        </div>
    
        <div class="cursor-pointer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-adjustments-horizontal"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 6l8 0" /><path d="M16 6l4 0" /><path d="M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 12l2 0" /><path d="M10 12l10 0" /><path d="M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M4 18l11 0" /><path d="M19 18l1 0" />
            </svg> 
        </div>
    </div>
    
</div>

@code
{
    private BECanvasComponent _canvasReference = default!;
    private Canvas2DContext _outputCanvasContext = default!;
    private BoidsSimulatorOptions _options = default!;
    private BoidsSimulator _simulator = default!;
    
    private const double _frameThresholdMs = 16.66;
    private double _lastFrameTimestamp;
    private bool _isHidden;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) {
            return;
        }

        Logger.LogDebug("First Render");
        var dotNetReference = DotNetObjectReference.Create(this);
        _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();

        await JsRuntime.InvokeVoidAsync("registerEvents", dotNetReference);
        await JsRuntime.InvokeVoidAsync("startAnimationFrame", dotNetReference);
    }

    private void SetupSimulator(double width, double height) {
        _options = new BoidsSimulatorOptions()
        {
            Count = 50,
            Width = (int)width,
            Height = (int)height
        };

        _simulator = new BoidsSimulator(Logger, _options);
    }

    private async ValueTask SetCanvasResolutionAsync(double width, double height)
    {
        var parameters = new Dictionary<string, object?>
        {
            { nameof(BECanvasComponent.Width), (long)width },
            { nameof(BECanvasComponent.Height), (long)height }
        };
        await _canvasReference.SetParametersAsync(ParameterView.FromDictionary(parameters));
    }

    [JSInvokable]
    public async ValueTask OnResize(double width, double height)
    {
        Logger.LogDebug("OnResize: {} {}", width, height);
        await SetCanvasResolutionAsync(width, height);
        SetupSimulator(width, height);
    }

    [JSInvokable]
    public async ValueTask OnVisibilityChange(bool isHidden)
    {
        Logger.LogDebug("OnVisibilityChange: {}", isHidden);
        _isHidden = isHidden;
    }


    [JSInvokable]
    public async ValueTask OnFrame(double timestamp)
    {
        if(_simulator == null) {
            return;
        }

        if(_isHidden) {
            return;
        }

        if (timestamp - _lastFrameTimestamp < _frameThresholdMs)
        {
            Logger.LogDebug("{} {} {}", timestamp, _lastFrameTimestamp, timestamp - _lastFrameTimestamp);
            return;
        }

        _lastFrameTimestamp = timestamp;

        await _outputCanvasContext.ClearRectAsync(0, 0, _options.Width, _options.Height);
        await _simulator.UpdateAndRenderAsync(_outputCanvasContext);
    }

}